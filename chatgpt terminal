'use client'

import { useEffect, useState, useRef } from 'react';
import { m, motion } from 'framer-motion';
import { useSearchParams } from 'next/navigation';
import { FaTerminal } from 'react-icons/fa';
import { MdClose } from 'react-icons/md';
import axiosClient from '@/lib/axiosClient';
import { useSiteConfigData } from '@/providers/SiteConfigProvider';
import { useAuthData } from '@/providers/AuthProvider';

const TerminalMain = () => {
  const searchParams = useSearchParams();
  const booking_tracking_id = searchParams.get('booking_tracking_id');
  const supplier_uid = searchParams.get('supplier_uid');
  const [sessionToken, setSessionToken] = useState(null);
  const [trackingId, setTrackingId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [history, setHistory] = useState([]);
  const [input, setInput] = useState('');
  const inputRef = useRef(null);
    const { member_id } = useAuthData()?.user_data || {};
  console.log("supplier_uid",supplier_uid)
const { origin } = useSiteConfigData();
  useEffect(() => {
    if (!booking_tracking_id) return;
    startSession();
  }, [booking_tracking_id]);

  const startSession = async () => {
    setLoading(true);
    try {
      const res = await axiosClient(origin).post('/terminal/create-session', {
        member_id,
        booking_tracking_id,
        supplier_uid,
      });
      if (res.data?.status === 'success') {
        setSessionToken(res.data.session_token);
        setTrackingId(res.data.tracking_id);
      } else {
        throw new Error(res.data?.reason || 'Invalid Session');
      }
    } catch (error) {
      console.error(error);
      setSessionToken(null);
    } finally {
      setLoading(false);
    }
  };

  const executeCommand = async (command) => {
    if (!sessionToken || !trackingId) return;
    setLoading(true);
    setHistory((prev) => [...prev, `> ${command}`]);
    try {
      const res = await axiosClient(origin).post('/terminal/execute-command', {
        trackingId,
        sessionToken,
        terminal_command: command,
      });
      setHistory((prev) => [...prev, res.data.response || 'Command executed']);
    } catch (error) {
      console.error(error);
      setHistory((prev) => [...prev, 'Error executing command']);
    } finally {
      setLoading(false);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && input.trim()) {
      executeCommand(input);
      setInput('');
    }
  };

  if (!booking_tracking_id) {
    return (
      <div className="bg-[#0B0F48] flex justify-center items-center text-white/70 w-full h-full p-4 rounded-[10px] relative">
        <button className="absolute top-1 right-1 p-1 text-black bg-white/70 rounded-md">
          <MdClose />
        </button>
        <span className='text-6xl flex gap-3 font-bold text-white/10'>
          <FaTerminal /> Not Valid
        </span>
      </div>
    );
  }

  return (
    <div className="bg-[#0B0F48] relative text-white/70 w-full h-full p-4 rounded-[10px]">
      <button className="absolute top-1 right-1 p-1 text-black bg-white/70 rounded-md">
        <MdClose />
      </button>
      <div className="h-full overflow-y-auto">
        {history.map((line, index) => (
          <motion.p key={index} initial={{ opacity: 0 }} animate={{ opacity: 1 }} className="text-sm">
            {line}
          </motion.p>
        ))}
        {loading && <motion.p animate={{ opacity: [0, 1, 0] }} transition={{ repeat: Infinity, duration: 1 }}>loading @</motion.p>}
        {!loading && (
          <div className="flex">
            <span className="text-green-400">&gt; </span>
            <motion.input
              ref={inputRef}
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
              className="bg-transparent border-none text-white outline-none flex-1"
              autoFocus
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default TerminalMain;
